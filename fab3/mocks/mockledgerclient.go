// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	sync "sync"

	fab3 "github.com/hyperledger/fabric-chaincode-evm/fab3"
	ledger "github.com/hyperledger/fabric-sdk-go/pkg/client/ledger"
	fab "github.com/hyperledger/fabric-sdk-go/pkg/common/providers/fab"
	common "github.com/hyperledger/fabric-sdk-go/third_party/github.com/hyperledger/fabric/protos/common"
)

type MockLedgerClient struct {
	QueryBlockStub        func(uint64, ...ledger.RequestOption) (*common.Block, error)
	queryBlockMutex       sync.RWMutex
	queryBlockArgsForCall []struct {
		arg1 uint64
		arg2 []ledger.RequestOption
	}
	queryBlockReturns struct {
		result1 *common.Block
		result2 error
	}
	queryBlockReturnsOnCall map[int]struct {
		result1 *common.Block
		result2 error
	}
	QueryBlockByHashStub        func([]byte, ...ledger.RequestOption) (*common.Block, error)
	queryBlockByHashMutex       sync.RWMutex
	queryBlockByHashArgsForCall []struct {
		arg1 []byte
		arg2 []ledger.RequestOption
	}
	queryBlockByHashReturns struct {
		result1 *common.Block
		result2 error
	}
	queryBlockByHashReturnsOnCall map[int]struct {
		result1 *common.Block
		result2 error
	}
	QueryBlockByTxIDStub        func(fab.TransactionID, ...ledger.RequestOption) (*common.Block, error)
	queryBlockByTxIDMutex       sync.RWMutex
	queryBlockByTxIDArgsForCall []struct {
		arg1 fab.TransactionID
		arg2 []ledger.RequestOption
	}
	queryBlockByTxIDReturns struct {
		result1 *common.Block
		result2 error
	}
	queryBlockByTxIDReturnsOnCall map[int]struct {
		result1 *common.Block
		result2 error
	}
	QueryInfoStub        func(...ledger.RequestOption) (*fab.BlockchainInfoResponse, error)
	queryInfoMutex       sync.RWMutex
	queryInfoArgsForCall []struct {
		arg1 []ledger.RequestOption
	}
	queryInfoReturns struct {
		result1 *fab.BlockchainInfoResponse
		result2 error
	}
	queryInfoReturnsOnCall map[int]struct {
		result1 *fab.BlockchainInfoResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *MockLedgerClient) QueryBlock(arg1 uint64, arg2 ...ledger.RequestOption) (*common.Block, error) {
	fake.queryBlockMutex.Lock()
	ret, specificReturn := fake.queryBlockReturnsOnCall[len(fake.queryBlockArgsForCall)]
	fake.queryBlockArgsForCall = append(fake.queryBlockArgsForCall, struct {
		arg1 uint64
		arg2 []ledger.RequestOption
	}{arg1, arg2})
	fake.recordInvocation("QueryBlock", []interface{}{arg1, arg2})
	fake.queryBlockMutex.Unlock()
	if fake.QueryBlockStub != nil {
		return fake.QueryBlockStub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.queryBlockReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *MockLedgerClient) QueryBlockCallCount() int {
	fake.queryBlockMutex.RLock()
	defer fake.queryBlockMutex.RUnlock()
	return len(fake.queryBlockArgsForCall)
}

func (fake *MockLedgerClient) QueryBlockArgsForCall(i int) (uint64, []ledger.RequestOption) {
	fake.queryBlockMutex.RLock()
	defer fake.queryBlockMutex.RUnlock()
	argsForCall := fake.queryBlockArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *MockLedgerClient) QueryBlockReturns(result1 *common.Block, result2 error) {
	fake.QueryBlockStub = nil
	fake.queryBlockReturns = struct {
		result1 *common.Block
		result2 error
	}{result1, result2}
}

func (fake *MockLedgerClient) QueryBlockReturnsOnCall(i int, result1 *common.Block, result2 error) {
	fake.QueryBlockStub = nil
	if fake.queryBlockReturnsOnCall == nil {
		fake.queryBlockReturnsOnCall = make(map[int]struct {
			result1 *common.Block
			result2 error
		})
	}
	fake.queryBlockReturnsOnCall[i] = struct {
		result1 *common.Block
		result2 error
	}{result1, result2}
}

func (fake *MockLedgerClient) QueryBlockByHash(arg1 []byte, arg2 ...ledger.RequestOption) (*common.Block, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.queryBlockByHashMutex.Lock()
	ret, specificReturn := fake.queryBlockByHashReturnsOnCall[len(fake.queryBlockByHashArgsForCall)]
	fake.queryBlockByHashArgsForCall = append(fake.queryBlockByHashArgsForCall, struct {
		arg1 []byte
		arg2 []ledger.RequestOption
	}{arg1Copy, arg2})
	fake.recordInvocation("QueryBlockByHash", []interface{}{arg1Copy, arg2})
	fake.queryBlockByHashMutex.Unlock()
	if fake.QueryBlockByHashStub != nil {
		return fake.QueryBlockByHashStub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.queryBlockByHashReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *MockLedgerClient) QueryBlockByHashCallCount() int {
	fake.queryBlockByHashMutex.RLock()
	defer fake.queryBlockByHashMutex.RUnlock()
	return len(fake.queryBlockByHashArgsForCall)
}

func (fake *MockLedgerClient) QueryBlockByHashArgsForCall(i int) ([]byte, []ledger.RequestOption) {
	fake.queryBlockByHashMutex.RLock()
	defer fake.queryBlockByHashMutex.RUnlock()
	argsForCall := fake.queryBlockByHashArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *MockLedgerClient) QueryBlockByHashReturns(result1 *common.Block, result2 error) {
	fake.QueryBlockByHashStub = nil
	fake.queryBlockByHashReturns = struct {
		result1 *common.Block
		result2 error
	}{result1, result2}
}

func (fake *MockLedgerClient) QueryBlockByHashReturnsOnCall(i int, result1 *common.Block, result2 error) {
	fake.QueryBlockByHashStub = nil
	if fake.queryBlockByHashReturnsOnCall == nil {
		fake.queryBlockByHashReturnsOnCall = make(map[int]struct {
			result1 *common.Block
			result2 error
		})
	}
	fake.queryBlockByHashReturnsOnCall[i] = struct {
		result1 *common.Block
		result2 error
	}{result1, result2}
}

func (fake *MockLedgerClient) QueryBlockByTxID(arg1 fab.TransactionID, arg2 ...ledger.RequestOption) (*common.Block, error) {
	fake.queryBlockByTxIDMutex.Lock()
	ret, specificReturn := fake.queryBlockByTxIDReturnsOnCall[len(fake.queryBlockByTxIDArgsForCall)]
	fake.queryBlockByTxIDArgsForCall = append(fake.queryBlockByTxIDArgsForCall, struct {
		arg1 fab.TransactionID
		arg2 []ledger.RequestOption
	}{arg1, arg2})
	fake.recordInvocation("QueryBlockByTxID", []interface{}{arg1, arg2})
	fake.queryBlockByTxIDMutex.Unlock()
	if fake.QueryBlockByTxIDStub != nil {
		return fake.QueryBlockByTxIDStub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.queryBlockByTxIDReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *MockLedgerClient) QueryBlockByTxIDCallCount() int {
	fake.queryBlockByTxIDMutex.RLock()
	defer fake.queryBlockByTxIDMutex.RUnlock()
	return len(fake.queryBlockByTxIDArgsForCall)
}

func (fake *MockLedgerClient) QueryBlockByTxIDArgsForCall(i int) (fab.TransactionID, []ledger.RequestOption) {
	fake.queryBlockByTxIDMutex.RLock()
	defer fake.queryBlockByTxIDMutex.RUnlock()
	argsForCall := fake.queryBlockByTxIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *MockLedgerClient) QueryBlockByTxIDReturns(result1 *common.Block, result2 error) {
	fake.QueryBlockByTxIDStub = nil
	fake.queryBlockByTxIDReturns = struct {
		result1 *common.Block
		result2 error
	}{result1, result2}
}

func (fake *MockLedgerClient) QueryBlockByTxIDReturnsOnCall(i int, result1 *common.Block, result2 error) {
	fake.QueryBlockByTxIDStub = nil
	if fake.queryBlockByTxIDReturnsOnCall == nil {
		fake.queryBlockByTxIDReturnsOnCall = make(map[int]struct {
			result1 *common.Block
			result2 error
		})
	}
	fake.queryBlockByTxIDReturnsOnCall[i] = struct {
		result1 *common.Block
		result2 error
	}{result1, result2}
}

func (fake *MockLedgerClient) QueryInfo(arg1 ...ledger.RequestOption) (*fab.BlockchainInfoResponse, error) {
	fake.queryInfoMutex.Lock()
	ret, specificReturn := fake.queryInfoReturnsOnCall[len(fake.queryInfoArgsForCall)]
	fake.queryInfoArgsForCall = append(fake.queryInfoArgsForCall, struct {
		arg1 []ledger.RequestOption
	}{arg1})
	fake.recordInvocation("QueryInfo", []interface{}{arg1})
	fake.queryInfoMutex.Unlock()
	if fake.QueryInfoStub != nil {
		return fake.QueryInfoStub(arg1...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.queryInfoReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *MockLedgerClient) QueryInfoCallCount() int {
	fake.queryInfoMutex.RLock()
	defer fake.queryInfoMutex.RUnlock()
	return len(fake.queryInfoArgsForCall)
}

func (fake *MockLedgerClient) QueryInfoArgsForCall(i int) []ledger.RequestOption {
	fake.queryInfoMutex.RLock()
	defer fake.queryInfoMutex.RUnlock()
	argsForCall := fake.queryInfoArgsForCall[i]
	return argsForCall.arg1
}

func (fake *MockLedgerClient) QueryInfoReturns(result1 *fab.BlockchainInfoResponse, result2 error) {
	fake.QueryInfoStub = nil
	fake.queryInfoReturns = struct {
		result1 *fab.BlockchainInfoResponse
		result2 error
	}{result1, result2}
}

func (fake *MockLedgerClient) QueryInfoReturnsOnCall(i int, result1 *fab.BlockchainInfoResponse, result2 error) {
	fake.QueryInfoStub = nil
	if fake.queryInfoReturnsOnCall == nil {
		fake.queryInfoReturnsOnCall = make(map[int]struct {
			result1 *fab.BlockchainInfoResponse
			result2 error
		})
	}
	fake.queryInfoReturnsOnCall[i] = struct {
		result1 *fab.BlockchainInfoResponse
		result2 error
	}{result1, result2}
}

func (fake *MockLedgerClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.queryBlockMutex.RLock()
	defer fake.queryBlockMutex.RUnlock()
	fake.queryBlockByHashMutex.RLock()
	defer fake.queryBlockByHashMutex.RUnlock()
	fake.queryBlockByTxIDMutex.RLock()
	defer fake.queryBlockByTxIDMutex.RUnlock()
	fake.queryInfoMutex.RLock()
	defer fake.queryInfoMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *MockLedgerClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ fab3.LedgerClient = new(MockLedgerClient)
